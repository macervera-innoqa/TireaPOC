/*Copyright (c) 2020-2021 TIREA All Rights Reserved.
 This software is the confidential and proprietary information of TIREA You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with TIREA*/
package es.tirea.wavemaker.consultaFacturas.desa.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import es.tirea.wavemaker.consultaFacturas.desa.FichProcesados;


/**
 * ServiceImpl object for domain model class FichProcesados.
 *
 * @see FichProcesados
 */
@Service("DESA.FichProcesadosService")
@Validated
public class FichProcesadosServiceImpl implements FichProcesadosService {

    private static final Logger LOGGER = LoggerFactory.getLogger(FichProcesadosServiceImpl.class);


    @Autowired
    @Qualifier("DESA.FichProcesadosDao")
    private WMGenericDao<FichProcesados, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<FichProcesados, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "DESATransactionManager")
    @Override
    public FichProcesados create(FichProcesados fichProcesados) {
        LOGGER.debug("Creating a new FichProcesados with information: {}", fichProcesados);

        FichProcesados fichProcesadosCreated = this.wmGenericDao.create(fichProcesados);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(fichProcesadosCreated);
    }

    @Transactional(readOnly = true, value = "DESATransactionManager")
    @Override
    public FichProcesados getById(Integer fichprocesadosId) {
        LOGGER.debug("Finding FichProcesados by id: {}", fichprocesadosId);
        return this.wmGenericDao.findById(fichprocesadosId);
    }

    @Transactional(readOnly = true, value = "DESATransactionManager")
    @Override
    public FichProcesados findById(Integer fichprocesadosId) {
        LOGGER.debug("Finding FichProcesados by id: {}", fichprocesadosId);
        try {
            return this.wmGenericDao.findById(fichprocesadosId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No FichProcesados found with id: {}", fichprocesadosId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "DESATransactionManager")
    @Override
    public List<FichProcesados> findByMultipleIds(List<Integer> fichprocesadosIds, boolean orderedReturn) {
        LOGGER.debug("Finding FichProcesados by ids: {}", fichprocesadosIds);

        return this.wmGenericDao.findByMultipleIds(fichprocesadosIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "DESATransactionManager")
    @Override
    public FichProcesados update(FichProcesados fichProcesados) {
        LOGGER.debug("Updating FichProcesados with information: {}", fichProcesados);

        this.wmGenericDao.update(fichProcesados);
        this.wmGenericDao.refresh(fichProcesados);

        return fichProcesados;
    }

    @Transactional(value = "DESATransactionManager")
    @Override
    public FichProcesados partialUpdate(Integer fichprocesadosId, Map<String, Object>fichProcesadosPatch) {
        LOGGER.debug("Partially Updating the FichProcesados with id: {}", fichprocesadosId);

        FichProcesados fichProcesados = getById(fichprocesadosId);

        try {
            ObjectReader fichProcesadosReader = this.objectMapper.reader().forType(FichProcesados.class).withValueToUpdate(fichProcesados);
            fichProcesados = fichProcesadosReader.readValue(this.objectMapper.writeValueAsString(fichProcesadosPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", fichProcesadosPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        fichProcesados = update(fichProcesados);

        return fichProcesados;
    }

    @Transactional(value = "DESATransactionManager")
    @Override
    public FichProcesados delete(Integer fichprocesadosId) {
        LOGGER.debug("Deleting FichProcesados with id: {}", fichprocesadosId);
        FichProcesados deleted = this.wmGenericDao.findById(fichprocesadosId);
        if (deleted == null) {
            LOGGER.debug("No FichProcesados found with id: {}", fichprocesadosId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), FichProcesados.class.getSimpleName(), fichprocesadosId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "DESATransactionManager")
    @Override
    public void delete(FichProcesados fichProcesados) {
        LOGGER.debug("Deleting FichProcesados with {}", fichProcesados);
        this.wmGenericDao.delete(fichProcesados);
    }

    @Transactional(readOnly = true, value = "DESATransactionManager")
    @Override
    public Page<FichProcesados> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all FichProcesados");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "DESATransactionManager")
    @Override
    public Page<FichProcesados> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all FichProcesados");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "DESATransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service DESA for table FichProcesados to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "DESATransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service DESA for table FichProcesados to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "DESATransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "DESATransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}
