/*Copyright (c) 2020-2021 TIREA All Rights Reserved.
 This software is the confidential and proprietary information of TIREA You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with TIREA*/
package es.tirea.wavemaker.consultaFacturas.desa.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import es.tirea.wavemaker.consultaFacturas.desa.Facturas;
import es.tirea.wavemaker.consultaFacturas.desa.FichProcesados;

/**
 * Service object for domain model class {@link Facturas}.
 */
public interface FacturasService {

    /**
     * Creates a new Facturas. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Facturas if any.
     *
     * @param facturas Details of the Facturas to be created; value cannot be null.
     * @return The newly created Facturas.
     */
    Facturas create(@Valid Facturas facturas);


	/**
     * Returns Facturas by given id if exists.
     *
     * @param facturasId The id of the Facturas to get; value cannot be null.
     * @return Facturas associated with the given facturasId.
	 * @throws EntityNotFoundException If no Facturas is found.
     */
    Facturas getById(Integer facturasId);

    /**
     * Find and return the Facturas by given id if exists, returns null otherwise.
     *
     * @param facturasId The id of the Facturas to get; value cannot be null.
     * @return Facturas associated with the given facturasId.
     */
    Facturas findById(Integer facturasId);

	/**
     * Find and return the list of Facturas by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param facturasIds The id's of the Facturas to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Facturas associated with the given facturasIds.
     */
    List<Facturas> findByMultipleIds(List<Integer> facturasIds, boolean orderedReturn);


    /**
     * Updates the details of an existing Facturas. It replaces all fields of the existing Facturas with the given facturas.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Facturas if any.
     *
     * @param facturas The details of the Facturas to be updated; value cannot be null.
     * @return The updated Facturas.
     * @throws EntityNotFoundException if no Facturas is found with given input.
     */
    Facturas update(@Valid Facturas facturas);


    /**
     * Partially updates the details of an existing Facturas. It updates only the
     * fields of the existing Facturas which are passed in the facturasPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Facturas if any.
     *
     * @param facturasId The id of the Facturas to be deleted; value cannot be null.
     * @param facturasPatch The partial data of Facturas which is supposed to be updated; value cannot be null.
     * @return The updated Facturas.
     * @throws EntityNotFoundException if no Facturas is found with given input.
     */
    Facturas partialUpdate(Integer facturasId, Map<String, Object> facturasPatch);

    /**
     * Deletes an existing Facturas with the given id.
     *
     * @param facturasId The id of the Facturas to be deleted; value cannot be null.
     * @return The deleted Facturas.
     * @throws EntityNotFoundException if no Facturas found with the given id.
     */
    Facturas delete(Integer facturasId);

    /**
     * Deletes an existing Facturas with the given object.
     *
     * @param facturas The instance of the Facturas to be deleted; value cannot be null.
     */
    void delete(Facturas facturas);

    /**
     * Find all Facturas matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Facturas.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Facturas> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Facturas matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Facturas.
     *
     * @see Pageable
     * @see Page
     */
    Page<Facturas> findAll(String query, Pageable pageable);

    /**
     * Exports all Facturas matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Facturas matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Facturas in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Facturas.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated fichProcesadoses for given Facturas id.
     *
     * @param idFactura value of idFactura; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated FichProcesados instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<FichProcesados> findAssociatedFichProcesadoses(Integer idFactura, Pageable pageable);

}
