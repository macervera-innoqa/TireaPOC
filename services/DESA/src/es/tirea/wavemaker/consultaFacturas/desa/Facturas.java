/*Copyright (c) 2020-2021 TIREA All Rights Reserved.
 This software is the confidential and proprietary information of TIREA You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with TIREA*/
package es.tirea.wavemaker.consultaFacturas.desa;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * Facturas generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`FACTURAS`")
public class Facturas implements Serializable {

    private Integer idFactura;
    private int idSafe;
    private String idCliente;
    private String idServicio;
    private String idContacto;
    private String numFactura;
    private Timestamp fechaFactura;
    private BigDecimal importe;
    private String lote;
    private String clase;
    private int idReceptor;
    private Receptores receptores;

    @Id
    @Column(name = "`ID_FACTURA`", nullable = false, scale = 0, precision = 10)
    public Integer getIdFactura() {
        return this.idFactura;
    }

    public void setIdFactura(Integer idFactura) {
        this.idFactura = idFactura;
    }

    @Column(name = "`ID_SAFE`", nullable = false, scale = 0, precision = 10)
    public int getIdSafe() {
        return this.idSafe;
    }

    public void setIdSafe(int idSafe) {
        this.idSafe = idSafe;
    }

    @Column(name = "`ID_CLIENTE`", nullable = false, length = 6)
    public String getIdCliente() {
        return this.idCliente;
    }

    public void setIdCliente(String idCliente) {
        this.idCliente = idCliente;
    }

    @Column(name = "`ID_SERVICIO`", nullable = false, length = 4)
    public String getIdServicio() {
        return this.idServicio;
    }

    public void setIdServicio(String idServicio) {
        this.idServicio = idServicio;
    }

    @Column(name = "`ID_CONTACTO`", nullable = false, length = 6)
    public String getIdContacto() {
        return this.idContacto;
    }

    public void setIdContacto(String idContacto) {
        this.idContacto = idContacto;
    }

    @Column(name = "`NUM_FACTURA`", nullable = false, length = 20)
    public String getNumFactura() {
        return this.numFactura;
    }

    public void setNumFactura(String numFactura) {
        this.numFactura = numFactura;
    }

    @Column(name = "`FECHA_FACTURA`", nullable = false)
    public Timestamp getFechaFactura() {
        return this.fechaFactura;
    }

    public void setFechaFactura(Timestamp fechaFactura) {
        this.fechaFactura = fechaFactura;
    }

    @Column(name = "`IMPORTE`", nullable = false, scale = 2, precision = 21)
    public BigDecimal getImporte() {
        return this.importe;
    }

    public void setImporte(BigDecimal importe) {
        this.importe = importe;
    }

    @Column(name = "`LOTE`", nullable = false, length = 70)
    public String getLote() {
        return this.lote;
    }

    public void setLote(String lote) {
        this.lote = lote;
    }

    @Column(name = "`CLASE`", nullable = false, length = 2)
    public String getClase() {
        return this.clase;
    }

    public void setClase(String clase) {
        this.clase = clase;
    }

    @Column(name = "`ID_RECEPTOR`", nullable = false, scale = 0, precision = 10)
    public int getIdReceptor() {
        return this.idReceptor;
    }

    public void setIdReceptor(int idReceptor) {
        this.idReceptor = idReceptor;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`ID_RECEPTOR`", referencedColumnName = "`ID_RECEPTOR`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_FACTURAS_RECEPTORES`"))
    @Fetch(FetchMode.JOIN)
    public Receptores getReceptores() {
        return this.receptores;
    }

    public void setReceptores(Receptores receptores) {
        if(receptores != null) {
            this.idReceptor = receptores.getIdReceptor();
        }

        this.receptores = receptores;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Facturas)) return false;
        final Facturas facturas = (Facturas) o;
        return Objects.equals(getIdFactura(), facturas.getIdFactura());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getIdFactura());
    }
}