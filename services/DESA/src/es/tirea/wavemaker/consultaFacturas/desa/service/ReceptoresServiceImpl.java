/*Copyright (c) 2020-2021 TIREA All Rights Reserved.
 This software is the confidential and proprietary information of TIREA You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with TIREA*/
package es.tirea.wavemaker.consultaFacturas.desa.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import es.tirea.wavemaker.consultaFacturas.desa.Facturas;
import es.tirea.wavemaker.consultaFacturas.desa.Receptores;


/**
 * ServiceImpl object for domain model class Receptores.
 *
 * @see Receptores
 */
@Service("DESA.ReceptoresService")
@Validated
public class ReceptoresServiceImpl implements ReceptoresService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ReceptoresServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("DESA.FacturasService")
    private FacturasService facturasService;

    @Autowired
    @Qualifier("DESA.ReceptoresDao")
    private WMGenericDao<Receptores, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Receptores, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "DESATransactionManager")
    @Override
    public Receptores create(Receptores receptores) {
        LOGGER.debug("Creating a new Receptores with information: {}", receptores);

        Receptores receptoresCreated = this.wmGenericDao.create(receptores);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(receptoresCreated);
    }

    @Transactional(readOnly = true, value = "DESATransactionManager")
    @Override
    public Receptores getById(Integer receptoresId) {
        LOGGER.debug("Finding Receptores by id: {}", receptoresId);
        return this.wmGenericDao.findById(receptoresId);
    }

    @Transactional(readOnly = true, value = "DESATransactionManager")
    @Override
    public Receptores findById(Integer receptoresId) {
        LOGGER.debug("Finding Receptores by id: {}", receptoresId);
        try {
            return this.wmGenericDao.findById(receptoresId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Receptores found with id: {}", receptoresId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "DESATransactionManager")
    @Override
    public List<Receptores> findByMultipleIds(List<Integer> receptoresIds, boolean orderedReturn) {
        LOGGER.debug("Finding Receptores by ids: {}", receptoresIds);

        return this.wmGenericDao.findByMultipleIds(receptoresIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "DESATransactionManager")
    @Override
    public Receptores update(Receptores receptores) {
        LOGGER.debug("Updating Receptores with information: {}", receptores);

        this.wmGenericDao.update(receptores);
        this.wmGenericDao.refresh(receptores);

        return receptores;
    }

    @Transactional(value = "DESATransactionManager")
    @Override
    public Receptores partialUpdate(Integer receptoresId, Map<String, Object>receptoresPatch) {
        LOGGER.debug("Partially Updating the Receptores with id: {}", receptoresId);

        Receptores receptores = getById(receptoresId);

        try {
            ObjectReader receptoresReader = this.objectMapper.reader().forType(Receptores.class).withValueToUpdate(receptores);
            receptores = receptoresReader.readValue(this.objectMapper.writeValueAsString(receptoresPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", receptoresPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        receptores = update(receptores);

        return receptores;
    }

    @Transactional(value = "DESATransactionManager")
    @Override
    public Receptores delete(Integer receptoresId) {
        LOGGER.debug("Deleting Receptores with id: {}", receptoresId);
        Receptores deleted = this.wmGenericDao.findById(receptoresId);
        if (deleted == null) {
            LOGGER.debug("No Receptores found with id: {}", receptoresId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Receptores.class.getSimpleName(), receptoresId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "DESATransactionManager")
    @Override
    public void delete(Receptores receptores) {
        LOGGER.debug("Deleting Receptores with {}", receptores);
        this.wmGenericDao.delete(receptores);
    }

    @Transactional(readOnly = true, value = "DESATransactionManager")
    @Override
    public Page<Receptores> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Receptores");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "DESATransactionManager")
    @Override
    public Page<Receptores> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Receptores");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "DESATransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service DESA for table Receptores to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "DESATransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service DESA for table Receptores to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "DESATransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "DESATransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "DESATransactionManager")
    @Override
    public Page<Facturas> findAssociatedFacturases(Integer idReceptor, Pageable pageable) {
        LOGGER.debug("Fetching all associated facturases");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("receptores.idReceptor = '" + idReceptor + "'");

        return facturasService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service FacturasService instance
     */
    protected void setFacturasService(FacturasService service) {
        this.facturasService = service;
    }

}