/*Copyright (c) 2020-2021 TIREA All Rights Reserved.
 This software is the confidential and proprietary information of TIREA You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with TIREA*/
package es.tirea.wavemaker.consultaFacturas.desa.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import es.tirea.wavemaker.consultaFacturas.desa.Facturas;
import es.tirea.wavemaker.consultaFacturas.desa.FichProcesados;


/**
 * ServiceImpl object for domain model class Facturas.
 *
 * @see Facturas
 */
@Service("DESA.FacturasService")
@Validated
public class FacturasServiceImpl implements FacturasService {

    private static final Logger LOGGER = LoggerFactory.getLogger(FacturasServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("DESA.FichProcesadosService")
    private FichProcesadosService fichProcesadosService;

    @Autowired
    @Qualifier("DESA.FacturasDao")
    private WMGenericDao<Facturas, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Facturas, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "DESATransactionManager")
    @Override
    public Facturas create(Facturas facturas) {
        LOGGER.debug("Creating a new Facturas with information: {}", facturas);

        Facturas facturasCreated = this.wmGenericDao.create(facturas);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(facturasCreated);
    }

    @Transactional(readOnly = true, value = "DESATransactionManager")
    @Override
    public Facturas getById(Integer facturasId) {
        LOGGER.debug("Finding Facturas by id: {}", facturasId);
        return this.wmGenericDao.findById(facturasId);
    }

    @Transactional(readOnly = true, value = "DESATransactionManager")
    @Override
    public Facturas findById(Integer facturasId) {
        LOGGER.debug("Finding Facturas by id: {}", facturasId);
        try {
            return this.wmGenericDao.findById(facturasId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Facturas found with id: {}", facturasId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "DESATransactionManager")
    @Override
    public List<Facturas> findByMultipleIds(List<Integer> facturasIds, boolean orderedReturn) {
        LOGGER.debug("Finding Facturas by ids: {}", facturasIds);

        return this.wmGenericDao.findByMultipleIds(facturasIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "DESATransactionManager")
    @Override
    public Facturas update(Facturas facturas) {
        LOGGER.debug("Updating Facturas with information: {}", facturas);

        this.wmGenericDao.update(facturas);
        this.wmGenericDao.refresh(facturas);

        return facturas;
    }

    @Transactional(value = "DESATransactionManager")
    @Override
    public Facturas partialUpdate(Integer facturasId, Map<String, Object>facturasPatch) {
        LOGGER.debug("Partially Updating the Facturas with id: {}", facturasId);

        Facturas facturas = getById(facturasId);

        try {
            ObjectReader facturasReader = this.objectMapper.reader().forType(Facturas.class).withValueToUpdate(facturas);
            facturas = facturasReader.readValue(this.objectMapper.writeValueAsString(facturasPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", facturasPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        facturas = update(facturas);

        return facturas;
    }

    @Transactional(value = "DESATransactionManager")
    @Override
    public Facturas delete(Integer facturasId) {
        LOGGER.debug("Deleting Facturas with id: {}", facturasId);
        Facturas deleted = this.wmGenericDao.findById(facturasId);
        if (deleted == null) {
            LOGGER.debug("No Facturas found with id: {}", facturasId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Facturas.class.getSimpleName(), facturasId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "DESATransactionManager")
    @Override
    public void delete(Facturas facturas) {
        LOGGER.debug("Deleting Facturas with {}", facturas);
        this.wmGenericDao.delete(facturas);
    }

    @Transactional(readOnly = true, value = "DESATransactionManager")
    @Override
    public Page<Facturas> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Facturas");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "DESATransactionManager")
    @Override
    public Page<Facturas> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Facturas");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "DESATransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service DESA for table Facturas to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "DESATransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service DESA for table Facturas to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "DESATransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "DESATransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "DESATransactionManager")
    @Override
    public Page<FichProcesados> findAssociatedFichProcesadoses(Integer idFactura, Pageable pageable) {
        LOGGER.debug("Fetching all associated fichProcesadoses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("facturas.idFactura = '" + idFactura + "'");

        return fichProcesadosService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service FichProcesadosService instance
     */
    protected void setFichProcesadosService(FichProcesadosService service) {
        this.fichProcesadosService = service;
    }

}
