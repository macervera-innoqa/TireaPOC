/*Copyright (c) 2020-2021 TIREA All Rights Reserved.
 This software is the confidential and proprietary information of TIREA You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with TIREA*/
package es.tirea.wavemaker.consultaFacturas.desa.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import es.tirea.wavemaker.consultaFacturas.desa.FichProcesados;
import es.tirea.wavemaker.consultaFacturas.desa.service.FichProcesadosService;


/**
 * Controller object for domain model class FichProcesados.
 * @see FichProcesados
 */
@RestController("DESA.FichProcesadosController")
@Api(value = "FichProcesadosController", description = "Exposes APIs to work with FichProcesados resource.")
@RequestMapping("/DESA/FichProcesados")
public class FichProcesadosController {

    private static final Logger LOGGER = LoggerFactory.getLogger(FichProcesadosController.class);

    @Autowired
	@Qualifier("DESA.FichProcesadosService")
	private FichProcesadosService fichProcesadosService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new FichProcesados instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public FichProcesados createFichProcesados(@RequestBody FichProcesados fichProcesados) {
		LOGGER.debug("Create FichProcesados with information: {}" , fichProcesados);

		fichProcesados = fichProcesadosService.create(fichProcesados);
		LOGGER.debug("Created FichProcesados with information: {}" , fichProcesados);

	    return fichProcesados;
	}

    @ApiOperation(value = "Returns the FichProcesados instance associated with the given id.")
    @RequestMapping(value = "/{idFichero:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public FichProcesados getFichProcesados(@PathVariable("idFichero") Integer idFichero) {
        LOGGER.debug("Getting FichProcesados with id: {}" , idFichero);

        FichProcesados foundFichProcesados = fichProcesadosService.getById(idFichero);
        LOGGER.debug("FichProcesados details with id: {}" , foundFichProcesados);

        return foundFichProcesados;
    }

    @ApiOperation(value = "Updates the FichProcesados instance associated with the given id.")
    @RequestMapping(value = "/{idFichero:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public FichProcesados editFichProcesados(@PathVariable("idFichero") Integer idFichero, @RequestBody FichProcesados fichProcesados) {
        LOGGER.debug("Editing FichProcesados with id: {}" , fichProcesados.getIdFichero());

        fichProcesados.setIdFichero(idFichero);
        fichProcesados = fichProcesadosService.update(fichProcesados);
        LOGGER.debug("FichProcesados details with id: {}" , fichProcesados);

        return fichProcesados;
    }
    
    @ApiOperation(value = "Partially updates the FichProcesados instance associated with the given id.")
    @RequestMapping(value = "/{idFichero:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public FichProcesados patchFichProcesados(@PathVariable("idFichero") Integer idFichero, @RequestBody @MapTo(FichProcesados.class) Map<String, Object> fichProcesadosPatch) {
        LOGGER.debug("Partially updating FichProcesados with id: {}" , idFichero);

        FichProcesados fichProcesados = fichProcesadosService.partialUpdate(idFichero, fichProcesadosPatch);
        LOGGER.debug("FichProcesados details after partial update: {}" , fichProcesados);

        return fichProcesados;
    }

    @ApiOperation(value = "Deletes the FichProcesados instance associated with the given id.")
    @RequestMapping(value = "/{idFichero:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteFichProcesados(@PathVariable("idFichero") Integer idFichero) {
        LOGGER.debug("Deleting FichProcesados with id: {}" , idFichero);

        FichProcesados deletedFichProcesados = fichProcesadosService.delete(idFichero);

        return deletedFichProcesados != null;
    }

    /**
     * @deprecated Use {@link #findFichProcesados(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of FichProcesados instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<FichProcesados> searchFichProcesadosByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering FichProcesados list by query filter:{}", (Object) queryFilters);
        return fichProcesadosService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of FichProcesados instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<FichProcesados> findFichProcesados(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering FichProcesados list by filter:", query);
        return fichProcesadosService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of FichProcesados instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<FichProcesados> filterFichProcesados(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering FichProcesados list by filter", query);
        return fichProcesadosService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Downloadable exportFichProcesados(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return fichProcesadosService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportFichProcesadosAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = FichProcesados.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> fichProcesadosService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of FichProcesados instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Long countFichProcesados( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting FichProcesados");
		return fichProcesadosService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Page<Map<String, Object>> getFichProcesadosAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return fichProcesadosService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service FichProcesadosService instance
	 */
	protected void setFichProcesadosService(FichProcesadosService service) {
		this.fichProcesadosService = service;
	}

}
