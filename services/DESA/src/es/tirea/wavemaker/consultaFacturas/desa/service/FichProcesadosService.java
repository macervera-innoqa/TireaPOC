/*Copyright (c) 2020-2021 TIREA All Rights Reserved.
 This software is the confidential and proprietary information of TIREA You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with TIREA*/
package es.tirea.wavemaker.consultaFacturas.desa.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import es.tirea.wavemaker.consultaFacturas.desa.FichProcesados;

/**
 * Service object for domain model class {@link FichProcesados}.
 */
public interface FichProcesadosService {

    /**
     * Creates a new FichProcesados. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on FichProcesados if any.
     *
     * @param fichProcesados Details of the FichProcesados to be created; value cannot be null.
     * @return The newly created FichProcesados.
     */
    FichProcesados create(@Valid FichProcesados fichProcesados);


	/**
     * Returns FichProcesados by given id if exists.
     *
     * @param fichprocesadosId The id of the FichProcesados to get; value cannot be null.
     * @return FichProcesados associated with the given fichprocesadosId.
	 * @throws EntityNotFoundException If no FichProcesados is found.
     */
    FichProcesados getById(Integer fichprocesadosId);

    /**
     * Find and return the FichProcesados by given id if exists, returns null otherwise.
     *
     * @param fichprocesadosId The id of the FichProcesados to get; value cannot be null.
     * @return FichProcesados associated with the given fichprocesadosId.
     */
    FichProcesados findById(Integer fichprocesadosId);

	/**
     * Find and return the list of FichProcesados by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param fichprocesadosIds The id's of the FichProcesados to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return FichProcesados associated with the given fichprocesadosIds.
     */
    List<FichProcesados> findByMultipleIds(List<Integer> fichprocesadosIds, boolean orderedReturn);


    /**
     * Updates the details of an existing FichProcesados. It replaces all fields of the existing FichProcesados with the given fichProcesados.
     *
     * This method overrides the input field values using Server side or database managed properties defined on FichProcesados if any.
     *
     * @param fichProcesados The details of the FichProcesados to be updated; value cannot be null.
     * @return The updated FichProcesados.
     * @throws EntityNotFoundException if no FichProcesados is found with given input.
     */
    FichProcesados update(@Valid FichProcesados fichProcesados);


    /**
     * Partially updates the details of an existing FichProcesados. It updates only the
     * fields of the existing FichProcesados which are passed in the fichProcesadosPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on FichProcesados if any.
     *
     * @param fichprocesadosId The id of the FichProcesados to be deleted; value cannot be null.
     * @param fichProcesadosPatch The partial data of FichProcesados which is supposed to be updated; value cannot be null.
     * @return The updated FichProcesados.
     * @throws EntityNotFoundException if no FichProcesados is found with given input.
     */
    FichProcesados partialUpdate(Integer fichprocesadosId, Map<String, Object> fichProcesadosPatch);

    /**
     * Deletes an existing FichProcesados with the given id.
     *
     * @param fichprocesadosId The id of the FichProcesados to be deleted; value cannot be null.
     * @return The deleted FichProcesados.
     * @throws EntityNotFoundException if no FichProcesados found with the given id.
     */
    FichProcesados delete(Integer fichprocesadosId);

    /**
     * Deletes an existing FichProcesados with the given object.
     *
     * @param fichProcesados The instance of the FichProcesados to be deleted; value cannot be null.
     */
    void delete(FichProcesados fichProcesados);

    /**
     * Find all FichProcesados matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching FichProcesados.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<FichProcesados> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all FichProcesados matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching FichProcesados.
     *
     * @see Pageable
     * @see Page
     */
    Page<FichProcesados> findAll(String query, Pageable pageable);

    /**
     * Exports all FichProcesados matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all FichProcesados matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the FichProcesados in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the FichProcesados.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}
